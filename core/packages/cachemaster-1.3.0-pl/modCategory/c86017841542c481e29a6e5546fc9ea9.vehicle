<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Plugins' => 
    array (
      'abd51463ddd4eb34ce48b8f720be87f6' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"CacheMaster","description":"Clears the cache for a single resource when minor changes are made","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n* CacheMaster plugin for CacheMaster extra\\n*\\n* Copyright 2012-2022 Bob Ray <https:\\/\\/bobsguides.com>\\n * Created on 12-09-2012\\n *\\n * CacheMaster is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * CacheMaster is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * CacheMaster; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package cachemaster\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * Clears the cache for a single resource when minor changes are made\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package cachemaster\\n **\\/\\n\\n\\/* Properties\\n\\n * @property &doChunks combo-boolean -- Execute for Chunks; Default: No.\\n * @property &doPlugins combo-boolean -- Execute for Plugins; Default: No.\\n * @property &doResources combo-boolean -- Execute for Resources; Default: Yes.\\n * @property &doSnippets combo-boolean -- Execute for Snippets; Default: No.\\n * @property &doTVs combo-boolean -- Execute for Template Variables; Default: No.\\n * @property &doTemplates combo-boolean -- Execute for Templates; Default: No.\\n * @property &uncheckEmptyCache combo-boolean -- If set to Yes, unchecks the Empty Cache checkbox when the Create\\/Edit Resource panel is loaded; Default: Yes.\\n\\n *\\/\\n\\n\\n\\/**\\n    @var $modx modX\\n    @var $resource modResource\\n    @var $scriptProperties array\\n    @var $mode int\\n*\\/\\n\\n$doDebug = false;\\n\\nif (!function_exists(\\"my_debug\\")) {\\n    function my_debug($message, $clear = false)\\n    {\\n        global $modx;\\n        $prefix = $modx->getVersionData()[\'version\'] >= 3\\n                ? \'MODX\\\\Revolution\\\\\\\\\'\\n                : \'\';\\n        $content = \'\';\\n        $chunk = $modx->getObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n        if (!$chunk) {\\n            $chunk = $modx->newObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n            $chunk->setContent(\'\');\\n            $chunk->save();\\n            $chunk = $modx->getObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n        } else {\\n            if ($clear) {\\n                $content = \'\';\\n            } else {\\n                $content = $chunk->getContent();\\n            }\\n        }\\n        $content .= $message . \\"\\\\n\\";\\n        $chunk->setContent($content);\\n        $chunk->save();\\n    }\\n}\\n\\n\\n\\/* don\'t execute for new documents *\\/\\nif ($mode == modSystemEvent::MODE_NEW) {\\n    return;\\n}\\n\\n$sp =& $scriptProperties;\\n$event = $modx->event->name;\\n$doResources = (bool) $modx->getOption(\'doResources\', $sp, false);\\n$doPlugins = (bool) $modx->getOption(\'doPlugins\', $sp, false);\\n$doSnippets = (bool) $modx->getOption(\'doSnippets\', $sp, false);\\n$doChunks = (bool) $modx->getOption(\'doChunks\', $sp, false);\\n$doTemplates = (bool) $modx->getOption(\'doTemplates\', $sp, false);\\n$doTVs = (bool) $modx->getOption(\'doTVs\', $sp, false);\\n$clearCheckbox = (bool) $modx->getOption(\'uncheckEmptyCache\', $sp, false);\\n$cm = $modx->getCacheManager();\\n\\n\\/**  @var $resource modResource *\\/\\n\\n\\/* Bail out if we\'re not doing this object *\\/\\nswitch($event) {\\n    case \'OnBeforeDocFormSave\':\\n        \\/* No longer using this event *\\/\\n        return;\\n\\n    case \'OnDocFormPrerender\':\\n\\n    case \'OnDocFormSave\':\\n        if (!$doResources) {\\n            return;\\n        }\\n        break;\\n    case \'OnSnipFormPrerender\':\\n    case \'OnBeforeSnipFormSave\':\\n        if (!$doSnippets) {\\n            return;\\n        }\\n        break;\\n    case \'OnPluginFormPrerender\':\\n    case \'OnBeforePluginFormSave\':\\n        if (!$doPlugins) {\\n            return;\\n        }\\n        break;\\n    case \'OnChunkFormPrerender\':\\n    case \'OnBeforeChunkFormSave\':\\n        if (!$doChunks) {\\n            return;\\n        }\\n        break;\\n    case \'OnTempFormPrerender\':\\n    case \'OnBeforeTempFormSave\':\\n        if (!$doTemplates) {\\n            return;\\n        }\\n        break;\\n    case \'OnTVFormPrerender\':\\n    case \'OnBeforeTVFormSave\':\\n        if (!$doTVs) {\\n            return;\\n        }\\n        break;\\n}\\n if ($doDebug) {\\n     my_debug(\'CacheMaster Executing\');\\n }\\n\\/* Handle prerender events *\\/\\n\\n\\/* Clear Empty Cache checkbox if UncheckEmptyCache is set *\\/\\nif (strstr($event, \'Prerender\')) {\\n    if ($doDebug) {\\n        my_debug(\'In Prerender\');\\n    }\\n    $panel = array(\\n        \'OnDocFormPrerender\' => \'modx-resource-syncsite\',\\n        \'OnSnipFormPrerender\' => \'modx-snippet-clear-cache\',\\n        \'OnPluginFormPrerender\' => \'modx-plugin-clear-cache\',\\n        \'OnChunkFormPrerender\' => \'modx-chunk-clear-cache\',\\n        \'OnTempFormPrerender\' => \'modx-template-clear-cache\',\\n        \'OnTVFormPrerender\' => \'modx-tv-clear-cache\',\\n    );\\n    if ($clearCheckbox) {\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n    Ext.onReady(function () {\\n        Ext.getCmp(\\"\' . $panel[$event] . \'\\").setValue(false);\\n    });\\n<\\/script>\');\\n\\n        \\/\\/ Clear Checkbox for Articles\\n    if ($event == \'OnDocFormPrerender\' && $resource->get(\'class_key\') == \'Article\')\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n            Ext.onReady(function () {\\n                Ext.getCmp(\\"\' . \'modx-resource-clearcache\' . \'\\").setValue(false);\\n            });\\n        <\\/script>\');\\n    }\\n    return;\\n}\\n\\n\\/* handle formSave events *\\/\\n\\n\\/* Don\'t execute if Empty Cache is checked *\\/\\n$syncsite = (bool) $modx->getOption(\'syncsite\', $_POST, false);\\n$emptyCache = (bool)$modx->getOption(\'clearCache\', $_POST, false);\\n\\n$clearCache = ($syncsite || $emptyCache);\\n\\nif ($doDebug) {\\n   my_debug(\'In FormSave\');\\n}\\n\\n\\nif ($clearCache) {\\n    \\/* return and let MODX clear the cache if box is checked *\\/\\n    if ($doDebug) {\\n        my_debug(\\"Empty cache is checked in \\" . $event);\\n    }\\n    return;\\n} else {\\n    if ($doDebug) {\\n        my_debug(\\"Empty cache is NOT checked in \\" . $event);\\n    }\\n}\\n\\n$path = null;\\n\\n\\/* Empty Cache is unchecked; clear the individual object cache *\\/\\nswitch($event) {\\n\\n    case \'OnDocFormSave\':\\n\\n        if ($doDebug) {\\n            my_debug(\\"In OnDocFormSave\\");\\n        }\\n\\n\\n            \\/* get resource context and id *\\/\\n            $ctx = $resource->get(\'context_key\');\\n            $docId = $resource->get(\'id\');\\n\\n\\n            \\/* set path to default cache file *\\/\\n            $path = MODX_CORE_PATH . \'cache\\/resource\\/\' . $ctx . \'\\/resources\\/\' . $docId . \'.cache.php\';\\n\\n            $ck = $resource->getCacheKey();\\n            $mgrCtx = $modx->context->get(\'key\');\\n            $cKey = str_replace($mgrCtx, $ctx, $ck);\\n\\n            $cm->delete($cKey, array(\\n                xPDO::OPT_CACHE_KEY => $modx->getOption(\'cache_resource_key\', null, \'resource\'),\\n                xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_resource_handler\', null,\\n                    $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n                xPDO::OPT_CACHE_FORMAT => (integer)$modx->getOption(\'cache_resource_format\', null,\\n                    $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n                )\\n            );\\n        \\/* Update the auto_publish cache *\\/\\n            $providers = array(\\n                \'auto_publish\' => array(\'contexts\' => $ctx),\\n            );\\n            $cm->refresh($providers);\\n\\n        break;\\n\\n    case \'OnBeforeSnipFormSave\':\\n        \\/** @var $snippet modSnippet *\\/\\n        $docId = $snippet->get(\'id\');\\n\\n        \\/* set path to default cache file *\\/\\n        $path = MODX_CORE_PATH . \'cache\\/scripts\\/elements\\/snippets\\/\' . $docId . \'.cache.php\';\\n\\n        $cKey = $snippet->getScriptCacheKey();\\n        if ($doDebug) {\\n            my_debug(\'Cache Key: \' . $cKey);\\n        }\\n        $cm->delete($cKey, array(\\n            xPDO::OPT_CACHE_KEY => $modx->getOption(\'cache_scripts_key\', null, \'scripts\'),\\n            xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_scripts_handler\', null,\\n                $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n            xPDO::OPT_CACHE_FORMAT => (integer)$modx->getOption(\'cache_scripts_format\', null,\\n            $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n        ));\\n        break;\\n\\n    case \'OnBeforePluginFormSave\':\\n        \\/** @var $plugin modPlugin *\\/\\n        $docId = $plugin->get(\'id\');\\n\\n        \\/* set path to default cache file *\\/\\n        $path = MODX_CORE_PATH . \'cache\\/scripts\\/elements\\/plugins\\/\' . $docId . \'.cache.php\';\\n\\n        $cKey = $plugin->getScriptCacheKey();\\n        \\/*$mgrCtx = $modx->context->get(\'key\');\\n        $cKey = str_replace($mgrCtx, $ctx, $ck);*\\/\\n        if ($doDebug) {\\n            my_debug(\'Cache Key: \' . $cKey);\\n        }\\n        $cm->delete($cKey, array(\\n            xPDO::OPT_CACHE_KEY=>$modx->getOption(\'cache_scripts_key\', null, \'scripts\'),\\n            xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_scripts_handler\', null,\\n                $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n            xPDO::OPT_CACHE_FORMAT=>(integer)$modx->getOption(\'cache_scripts_format\', null,\\n            $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n        ));\\n\\n        break;\\n}\\n\\n\\/* clear the cache the old-fashioned way, just in case *\\/\\nif ($path && file_exists($path)) {\\n    unlink($path);\\n}\\n\\n\\nreturn \'\';","locked":0,"properties":"a:7:{s:8:\\"doChunks\\";a:7:{s:4:\\"name\\";s:8:\\"doChunks\\";s:4:\\"desc\\";s:17:\\"cm_do_chunks_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:9:\\"doPlugins\\";a:7:{s:4:\\"name\\";s:9:\\"doPlugins\\";s:4:\\"desc\\";s:18:\\"cm_do_plugins_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:11:\\"doResources\\";a:7:{s:4:\\"name\\";s:11:\\"doResources\\";s:4:\\"desc\\";s:20:\\"cm_do_resources_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:10:\\"doSnippets\\";a:7:{s:4:\\"name\\";s:10:\\"doSnippets\\";s:4:\\"desc\\";s:19:\\"cm_do_snippets_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:5:\\"doTVs\\";a:7:{s:4:\\"name\\";s:5:\\"doTVs\\";s:4:\\"desc\\";s:14:\\"cm_do_tvs_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:11:\\"doTemplates\\";a:7:{s:4:\\"name\\";s:11:\\"doTemplates\\";s:4:\\"desc\\";s:20:\\"cm_do_templates_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}s:17:\\"uncheckEmptyCache\\";a:7:{s:4:\\"name\\";s:17:\\"uncheckEmptyCache\\";s:4:\\"desc\\";s:27:\\"cm_uncheck_empty_cache_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:22:\\"cachemaster:properties\\";s:4:\\"area\\";s:11:\\"CacheMaster\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n* CacheMaster plugin for CacheMaster extra\\n*\\n* Copyright 2012-2022 Bob Ray <https:\\/\\/bobsguides.com>\\n * Created on 12-09-2012\\n *\\n * CacheMaster is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * CacheMaster is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * CacheMaster; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package cachemaster\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * Clears the cache for a single resource when minor changes are made\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package cachemaster\\n **\\/\\n\\n\\/* Properties\\n\\n * @property &doChunks combo-boolean -- Execute for Chunks; Default: No.\\n * @property &doPlugins combo-boolean -- Execute for Plugins; Default: No.\\n * @property &doResources combo-boolean -- Execute for Resources; Default: Yes.\\n * @property &doSnippets combo-boolean -- Execute for Snippets; Default: No.\\n * @property &doTVs combo-boolean -- Execute for Template Variables; Default: No.\\n * @property &doTemplates combo-boolean -- Execute for Templates; Default: No.\\n * @property &uncheckEmptyCache combo-boolean -- If set to Yes, unchecks the Empty Cache checkbox when the Create\\/Edit Resource panel is loaded; Default: Yes.\\n\\n *\\/\\n\\n\\n\\/**\\n    @var $modx modX\\n    @var $resource modResource\\n    @var $scriptProperties array\\n    @var $mode int\\n*\\/\\n\\n$doDebug = false;\\n\\nif (!function_exists(\\"my_debug\\")) {\\n    function my_debug($message, $clear = false)\\n    {\\n        global $modx;\\n        $prefix = $modx->getVersionData()[\'version\'] >= 3\\n                ? \'MODX\\\\Revolution\\\\\\\\\'\\n                : \'\';\\n        $content = \'\';\\n        $chunk = $modx->getObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n        if (!$chunk) {\\n            $chunk = $modx->newObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n            $chunk->setContent(\'\');\\n            $chunk->save();\\n            $chunk = $modx->getObject($prefix . \'modChunk\', array(\'name\' => \'Debug\'));\\n        } else {\\n            if ($clear) {\\n                $content = \'\';\\n            } else {\\n                $content = $chunk->getContent();\\n            }\\n        }\\n        $content .= $message . \\"\\\\n\\";\\n        $chunk->setContent($content);\\n        $chunk->save();\\n    }\\n}\\n\\n\\n\\/* don\'t execute for new documents *\\/\\nif ($mode == modSystemEvent::MODE_NEW) {\\n    return;\\n}\\n\\n$sp =& $scriptProperties;\\n$event = $modx->event->name;\\n$doResources = (bool) $modx->getOption(\'doResources\', $sp, false);\\n$doPlugins = (bool) $modx->getOption(\'doPlugins\', $sp, false);\\n$doSnippets = (bool) $modx->getOption(\'doSnippets\', $sp, false);\\n$doChunks = (bool) $modx->getOption(\'doChunks\', $sp, false);\\n$doTemplates = (bool) $modx->getOption(\'doTemplates\', $sp, false);\\n$doTVs = (bool) $modx->getOption(\'doTVs\', $sp, false);\\n$clearCheckbox = (bool) $modx->getOption(\'uncheckEmptyCache\', $sp, false);\\n$cm = $modx->getCacheManager();\\n\\n\\/**  @var $resource modResource *\\/\\n\\n\\/* Bail out if we\'re not doing this object *\\/\\nswitch($event) {\\n    case \'OnBeforeDocFormSave\':\\n        \\/* No longer using this event *\\/\\n        return;\\n\\n    case \'OnDocFormPrerender\':\\n\\n    case \'OnDocFormSave\':\\n        if (!$doResources) {\\n            return;\\n        }\\n        break;\\n    case \'OnSnipFormPrerender\':\\n    case \'OnBeforeSnipFormSave\':\\n        if (!$doSnippets) {\\n            return;\\n        }\\n        break;\\n    case \'OnPluginFormPrerender\':\\n    case \'OnBeforePluginFormSave\':\\n        if (!$doPlugins) {\\n            return;\\n        }\\n        break;\\n    case \'OnChunkFormPrerender\':\\n    case \'OnBeforeChunkFormSave\':\\n        if (!$doChunks) {\\n            return;\\n        }\\n        break;\\n    case \'OnTempFormPrerender\':\\n    case \'OnBeforeTempFormSave\':\\n        if (!$doTemplates) {\\n            return;\\n        }\\n        break;\\n    case \'OnTVFormPrerender\':\\n    case \'OnBeforeTVFormSave\':\\n        if (!$doTVs) {\\n            return;\\n        }\\n        break;\\n}\\n if ($doDebug) {\\n     my_debug(\'CacheMaster Executing\');\\n }\\n\\/* Handle prerender events *\\/\\n\\n\\/* Clear Empty Cache checkbox if UncheckEmptyCache is set *\\/\\nif (strstr($event, \'Prerender\')) {\\n    if ($doDebug) {\\n        my_debug(\'In Prerender\');\\n    }\\n    $panel = array(\\n        \'OnDocFormPrerender\' => \'modx-resource-syncsite\',\\n        \'OnSnipFormPrerender\' => \'modx-snippet-clear-cache\',\\n        \'OnPluginFormPrerender\' => \'modx-plugin-clear-cache\',\\n        \'OnChunkFormPrerender\' => \'modx-chunk-clear-cache\',\\n        \'OnTempFormPrerender\' => \'modx-template-clear-cache\',\\n        \'OnTVFormPrerender\' => \'modx-tv-clear-cache\',\\n    );\\n    if ($clearCheckbox) {\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n    Ext.onReady(function () {\\n        Ext.getCmp(\\"\' . $panel[$event] . \'\\").setValue(false);\\n    });\\n<\\/script>\');\\n\\n        \\/\\/ Clear Checkbox for Articles\\n    if ($event == \'OnDocFormPrerender\' && $resource->get(\'class_key\') == \'Article\')\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n            Ext.onReady(function () {\\n                Ext.getCmp(\\"\' . \'modx-resource-clearcache\' . \'\\").setValue(false);\\n            });\\n        <\\/script>\');\\n    }\\n    return;\\n}\\n\\n\\/* handle formSave events *\\/\\n\\n\\/* Don\'t execute if Empty Cache is checked *\\/\\n$syncsite = (bool) $modx->getOption(\'syncsite\', $_POST, false);\\n$emptyCache = (bool)$modx->getOption(\'clearCache\', $_POST, false);\\n\\n$clearCache = ($syncsite || $emptyCache);\\n\\nif ($doDebug) {\\n   my_debug(\'In FormSave\');\\n}\\n\\n\\nif ($clearCache) {\\n    \\/* return and let MODX clear the cache if box is checked *\\/\\n    if ($doDebug) {\\n        my_debug(\\"Empty cache is checked in \\" . $event);\\n    }\\n    return;\\n} else {\\n    if ($doDebug) {\\n        my_debug(\\"Empty cache is NOT checked in \\" . $event);\\n    }\\n}\\n\\n$path = null;\\n\\n\\/* Empty Cache is unchecked; clear the individual object cache *\\/\\nswitch($event) {\\n\\n    case \'OnDocFormSave\':\\n\\n        if ($doDebug) {\\n            my_debug(\\"In OnDocFormSave\\");\\n        }\\n\\n\\n            \\/* get resource context and id *\\/\\n            $ctx = $resource->get(\'context_key\');\\n            $docId = $resource->get(\'id\');\\n\\n\\n            \\/* set path to default cache file *\\/\\n            $path = MODX_CORE_PATH . \'cache\\/resource\\/\' . $ctx . \'\\/resources\\/\' . $docId . \'.cache.php\';\\n\\n            $ck = $resource->getCacheKey();\\n            $mgrCtx = $modx->context->get(\'key\');\\n            $cKey = str_replace($mgrCtx, $ctx, $ck);\\n\\n            $cm->delete($cKey, array(\\n                xPDO::OPT_CACHE_KEY => $modx->getOption(\'cache_resource_key\', null, \'resource\'),\\n                xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_resource_handler\', null,\\n                    $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n                xPDO::OPT_CACHE_FORMAT => (integer)$modx->getOption(\'cache_resource_format\', null,\\n                    $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n                )\\n            );\\n        \\/* Update the auto_publish cache *\\/\\n            $providers = array(\\n                \'auto_publish\' => array(\'contexts\' => $ctx),\\n            );\\n            $cm->refresh($providers);\\n\\n        break;\\n\\n    case \'OnBeforeSnipFormSave\':\\n        \\/** @var $snippet modSnippet *\\/\\n        $docId = $snippet->get(\'id\');\\n\\n        \\/* set path to default cache file *\\/\\n        $path = MODX_CORE_PATH . \'cache\\/scripts\\/elements\\/snippets\\/\' . $docId . \'.cache.php\';\\n\\n        $cKey = $snippet->getScriptCacheKey();\\n        if ($doDebug) {\\n            my_debug(\'Cache Key: \' . $cKey);\\n        }\\n        $cm->delete($cKey, array(\\n            xPDO::OPT_CACHE_KEY => $modx->getOption(\'cache_scripts_key\', null, \'scripts\'),\\n            xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_scripts_handler\', null,\\n                $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n            xPDO::OPT_CACHE_FORMAT => (integer)$modx->getOption(\'cache_scripts_format\', null,\\n            $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n        ));\\n        break;\\n\\n    case \'OnBeforePluginFormSave\':\\n        \\/** @var $plugin modPlugin *\\/\\n        $docId = $plugin->get(\'id\');\\n\\n        \\/* set path to default cache file *\\/\\n        $path = MODX_CORE_PATH . \'cache\\/scripts\\/elements\\/plugins\\/\' . $docId . \'.cache.php\';\\n\\n        $cKey = $plugin->getScriptCacheKey();\\n        \\/*$mgrCtx = $modx->context->get(\'key\');\\n        $cKey = str_replace($mgrCtx, $ctx, $ck);*\\/\\n        if ($doDebug) {\\n            my_debug(\'Cache Key: \' . $cKey);\\n        }\\n        $cm->delete($cKey, array(\\n            xPDO::OPT_CACHE_KEY=>$modx->getOption(\'cache_scripts_key\', null, \'scripts\'),\\n            xPDO::OPT_CACHE_HANDLER => $modx->getOption(\'cache_scripts_handler\', null,\\n                $modx->getOption(xPDO::OPT_CACHE_HANDLER)),\\n            xPDO::OPT_CACHE_FORMAT=>(integer)$modx->getOption(\'cache_scripts_format\', null,\\n            $modx->getOption(xPDO::OPT_CACHE_FORMAT, null, xPDOCacheManager::CACHE_PHP))\\n        ));\\n\\n        break;\\n}\\n\\n\\/* clear the cache the old-fashioned way, just in case *\\/\\nif ($path && file_exists($path)) {\\n    unlink($path);\\n}\\n\\n\\nreturn \'\';"}',
        'guid' => '060be503a1d8d77abacff99af1aa7930',
        'native_key' => 1,
        'signature' => '660d2c825620c427294e0ebe14f63c69',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'cachemaster',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"cachemaster-1.3.0-pl\\/modCategory\\/c86017841542c481e29a6e5546fc9ea9\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"cachemaster"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"cachemaster-1.3.0-pl\\/modCategory\\/c86017841542c481e29a6e5546fc9ea9.plugin.resolver.resolver","type":"php","name":"plugin.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'fe38f56fad6762ba0a29ef1c77d1a371',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'c86017841542c481e29a6e5546fc9ea9',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"CacheMaster","rank":0}',
);